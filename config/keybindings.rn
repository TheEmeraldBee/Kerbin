use crate::EditorCommand;

pub fn load(api) {
    // ----------- //
    // Keybindings //
    // ----------- //

    // Scrolling
    api.input.register_input(
        [],
        ["ctrl-u"],
        [EditorCommand::MoveCursor(0, -5), EditorCommand::Scroll(-5)],
        "Scroll Up",
    );
    api.input.register_input(
        [],
        ["ctrl-d"],
        [EditorCommand::MoveCursor(0, 5), EditorCommand::Scroll(5)],
        "Scroll Down",
    );

    // General Movement
    api.input.register_input([], ["left"], [EditorCommand::MoveCursor(-1, 0)], "Move Left");
    api.input.register_input([], ["down"], [EditorCommand::MoveCursor(0, 1)], "Move Down");
    api.input.register_input([], ["up"], [EditorCommand::MoveCursor(0, -1)], "Move Up");
    api.input.register_input([], ["left"], [EditorCommand::MoveCursor(1, 0)], "Move Right");

    api.input.register_input([], ["h"], [EditorCommand::MoveCursor(-1, 0)], "Move Left");
    api.input.register_input([], ["j"], [EditorCommand::MoveCursor(0, 1)], "Move Down");
    api.input.register_input([], ["k"], [EditorCommand::MoveCursor(0, -1)], "Move Up");
    api.input.register_input([], ["l"], [EditorCommand::MoveCursor(1, 0)], "Move Right");

    api.input.register_input(
        [],
        ["d"],
        [
            EditorCommand::StartChangeGroup,
            EditorCommand::DeleteChars(0, 1),
            EditorCommand::CommitChangeGroup,
        ],
        "Delete",
    );

    api.input.register_input(
        [],
        ["shift-d"],
        [
            EditorCommand::StartChangeGroup,
            EditorCommand::DeleteChars(0, std::u64::MAX),
            EditorCommand::CommitChangeGroup,
        ],
        "Delete",
    );

    // Insert Mode Bindings
    api.input.register_input(
        ['i'],
        ["backspace"],
        [EditorCommand::DeleteChars(-1, 1), EditorCommand::MoveCursor(-1, 0)],
        "Delete back",
    );
    api.input.register_input(
        ['i'],
        ["enter"],
        [EditorCommand::InsertLine(0), EditorCommand::MoveCursor(-32000, 1)],
        "New line",
    );

    // File Commands
    api.input.register_input([], [";", "w"], [EditorCommand::WriteFile(None)], "Write File");

    // Mode Switching
    api.input.register_input(
        ['n'],
        ["i"],
        [EditorCommand::StartChangeGroup, EditorCommand::ChangeMode('i')],
        "Insert Mode",
    );
    api.input.register_input(
        [],
        ["esc"],
        [EditorCommand::CommitChangeGroup, EditorCommand::ChangeMode('n')],
        "Exit to normal mode",
    );

    // Buffer management
    api.input.register_input(['n'], [";", "q"], [EditorCommand::CloseCurrentBuffer], "Close buffer");
    api.input.register_input(['n'], [";", "shift-q"], [EditorCommand::Quit], "Quit");
    api.input.register_input([], ["g", "n"], [EditorCommand::ChangeBuffer(1)], "Goto next buffer");
    api.input.register_input([], ["g", "p"], [EditorCommand::ChangeBuffer(-1)], "Goto prev buffer");

    // Quick actions
    api.input.register_input([], ["g", "h"], [EditorCommand::MoveCursor(-32000, 0)], "Goto end of line");
    api.input.register_input([], ["g", "l"], [EditorCommand::MoveCursor(32000, 0)], "Goto beginning of line");

    api.input.register_input(
        [],
        ["shift-x"],
        [
            EditorCommand::StartChangeGroup,
            EditorCommand::DeleteLine(0),
            EditorCommand::CommitChangeGroup,
        ],
        "Delete Current Line",
    );

    // History
    api.input.register_input([], ["u"], [EditorCommand::Undo], "Undo");
    api.input.register_input([], ["shift-u"], [EditorCommand::Redo], "Redo");

    api.input.register_input(
        ['n'],
        ["o"],
        [
            EditorCommand::StartChangeGroup,
            EditorCommand::CreateLine(1),
            EditorCommand::MoveCursor(0, 1),
            EditorCommand::ChangeMode('i'),
        ],
        "Edit on new line",
    );
    api.input.register_input(
        ['n'],
        ["shift-o"],
        [
            EditorCommand::StartChangeGroup,
            EditorCommand::CreateLine(0),
            EditorCommand::MoveCursor(0, 0),
            EditorCommand::ChangeMode('i'),
        ],
        "Edit on new line",
    );
}
