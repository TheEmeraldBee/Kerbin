use crate::EditorCommand;

pub fn repeat(api, commands, i) {
  api.commands.add(EditorCommand::Repeat(commands, i));
}

pub fn load(api) {
    // ----------- //
    // Keybindings //
    // ----------- //

    // Command Palette
    api.input.register_input(
        [],
        [":"],
        |api, _i| api.mode.set('c'),
        "Command Palette",
    );

    // Scrolling
    api.input.register_input(
        [],
        ["ctrl-u"],
        |api, i| repeat(api, [EditorCommand::MoveCursor(0, -5), EditorCommand::Scroll(-5)], i),
        "Scroll Up",
    );
    api.input.register_input(
        [],
        ["ctrl-d"],
        |api, i| {
            let line_height = api.window.height() - 3;
            api.buffers.current().scroll_lines(line_height);
            api.buffers.current().move_cursor(0, line_height);
        },
        "Scroll Down",
    );

    // General Movement
    api.input.register_input(
        [],
        ["left"],
        |api, i| repeat(api, [EditorCommand::MoveCursor(-1, 0)], i),
        "Move Left",
    );
    api.input.register_input(
        [],
        ["down"],
        |api, i| repeat(api, [EditorCommand::MoveCursor(0, 1)], i),
        "Move Down",
    );
    api.input.register_input(
        [],
        ["up"],
        |api, i| repeat(api, [EditorCommand::MoveCursor(0, -1)], i),
        "Move Up",
    );
    api.input.register_input(
        [],
        ["left"],
        |api, i| repeat(api, [EditorCommand::MoveCursor(1, 0)], i),
        "Move Right",
    );

    api.input.register_input(
        [],
        ["h"],
        |api, i| repeat(api, [EditorCommand::MoveCursor(-1, 0)], i),
        "Move Left",
    );
    api.input.register_input(
        [],
        ["j"],
        |api, i| repeat(api, [EditorCommand::MoveCursor(0, 1)], i),
        "Move Down",
    );
    api.input.register_input(
        [],
        ["k"],
        |api, i| repeat(api, [EditorCommand::MoveCursor(0, -1)], i),
        "Move Up",
    );
    api.input.register_input(
        [],
        ["l"],
        |api, i| repeat(api, [EditorCommand::MoveCursor(1, 0)], i),
        "Move Right",
    );

    api.input.register_input(
        [],
        ["d"],
        |api, i| repeat(api, 
            [
                EditorCommand::StartChangeGroup,
                EditorCommand::DeleteChars(0, 1),
                EditorCommand::CommitChangeGroup,
            ],
            i,
        ),
        "Delete",
    );

    api.input.register_input(
        [],
        ["shift-d"],
        |api, i| repeat(api,
            [
                EditorCommand::StartChangeGroup,
                EditorCommand::DeleteChars(0, std::u64::MAX),
                EditorCommand::CommitChangeGroup,
            ],
            i,
        ),
        "Delete",
    );

    // Insert Mode Bindings
    api.input.register_input(
        ['i'],
        ["backspace"],
        |api, i| {
          if api.buffers.current().col() == 0 {
            api.buffers.current().move_cursor(-32000, -1);
            let line_len = api.buffers.current().cur_line().len();
            api.buffers.current().join_line_relative(0);
            api.buffers.current().move_cursor(line_len, 0);
            api.window.render(50, 50, "Worked!", None);
          } else {
            api.buffers.current().remove_chars_relative(-1, 1);
            api.buffers.current().move_cursor(-1, 0);
          }
        },
        "Delete back",
    );
    api.input.register_input(
        ['i'],
        ["enter"],
        |api, i| repeat(api, [EditorCommand::InsertLine(0)], i),
        "New line",
    );

    // File Commands
    api.input.register_input(
        [],
        [";", "w"],
        |api, i| repeat(api, [EditorCommand::WriteFile(None)], i),
        "Write File",
    );

    // Mode Switching
    api.input.register_input(
        ['n'],
        ["i"],
        |api, i| repeat(api, [EditorCommand::StartChangeGroup, EditorCommand::ChangeMode('i')], i),
        "Insert Mode",
    );
    api.input.register_input(
        [],
        ["esc"],
        |api, i| repeat(api, [EditorCommand::CommitChangeGroup, EditorCommand::ChangeMode('n')], i),
        "Exit to normal mode",
    );

    // Buffer management
    api.input.register_input(
        ['n'],
        [";", "q"],
        |api, i| repeat(api, [EditorCommand::CloseCurrentBuffer], i),
        "Close buffer",
    );
    api.input.register_input(
        ['n'],
        [";", "shift-q"],
        |api, i| repeat(api, [EditorCommand::Quit], i),
        "Quit",
    );
    api.input.register_input(
        [],
        ["g", "n"],
        |api, i| repeat(api, [EditorCommand::ChangeBuffer(1)], i),
        "Goto next buffer",
    );
    api.input.register_input(
        [],
        ["g", "p"],
        |api, i| repeat(api, [EditorCommand::ChangeBuffer(-1)], i),
        "Goto prev buffer",
    );

    // Quick actions
    api.input.register_input(
        [],
        ["g", "h"],
        |api, i| repeat(api, [EditorCommand::MoveCursor(-32000, 0)], i),
        "Goto end of line",
    );
    api.input.register_input(
        [],
        ["g", "l"],
        |api, i| repeat(api, [EditorCommand::MoveCursor(32000, 0)], i),
        "Goto beginning of line",
    );

    api.input.register_input(
        [],
        ["shift-x"],
        |api, i| repeat(api, 
            [
                EditorCommand::StartChangeGroup,
                EditorCommand::DeleteLine(0),
                EditorCommand::CommitChangeGroup,
            ],
            i,
        ),
        "Delete Current Line",
    );

    // History
    api.input.register_input([], ["u"], |api, i| repeat(api, [EditorCommand::Undo], i), "Undo");
    api.input.register_input([], ["shift-u"], |api, i| repeat(api, [EditorCommand::Redo], i), "Redo");

    api.input.register_input(
        ['n'],
        ["o"],
        |api, i| repeat(api, 
            [
                EditorCommand::StartChangeGroup,
                EditorCommand::CreateLine(1),
                EditorCommand::MoveCursor(0, 1),
                EditorCommand::ChangeMode('i'),
            ],
            i,
        ),
        "Edit on new line",
    );
    api.input.register_input(
        ['n'],
        ["shift-o"],
        |api, i| repeat(api, 
            [
                EditorCommand::StartChangeGroup,
                EditorCommand::CreateLine(0),
                EditorCommand::MoveCursor(0, 0),
                EditorCommand::ChangeMode('i'),
            ],
            i,
        ),
        "Edit on new line",
    );

    api.input.register_input([], ["shift-j"], |api, i| {
        api.buffers.current().start_change_group();
        api.buffers.current().join_line_relative(0);
        api.buffers.current().commit_change_group();
    },
    "Join Line");
}
