use crate::EditorStyle;

pub fn load(api) {
    let blue = (97, 175, 239);
    let purple = (198, 120, 221);
    let green = (152, 195, 121);
    let grey = (92, 99, 112);
    let yellow = (229, 192, 123);
    let orange = (209, 154, 102);
    let red = (224, 108, 117);

    let dark_grey = (80, 90, 96);

    api.theme.register("ui.linenum", EditorStyle::new().fg(dark_grey));
    api.theme.register("ui.bufferline.active", EditorStyle::new().underline(green).bold());
    api.theme.register("ui.bufferline.inactive", EditorStyle::new().fg(grey).italic());

    api.theme.register("ts.keyword", EditorStyle::new().fg(purple));

    api.theme.register("ts.function", EditorStyle::new().fg(blue));
    api.theme.register("ts.function.builtin", EditorStyle::new().fg(blue));
    api.theme.register("ts.function.macro", EditorStyle::new().fg(blue));
    api.theme.register("ts.string", EditorStyle::new().fg(green));
    api.theme.register("ts.comment", EditorStyle::new().fg(grey));
    api.theme.register("ts.type", EditorStyle::new().fg(yellow));
    api.theme.register("ts.type.builtin", EditorStyle::new().fg(yellow));
    api.theme.register("ts.type.constant", EditorStyle::new().fg(orange));
    api.theme.register("ts.constant.builtin", EditorStyle::new().fg(orange));
    api.theme.register("ts.variable", EditorStyle::new().fg(red));
    api.theme.register("ts.variable.parameter", EditorStyle::new().fg(red));
    api.theme.register("ts.property", EditorStyle::new().fg(red));
    api.theme.register("ts.punctuation.bracket", EditorStyle::new().fg(grey));
    api.theme.register("ts.punctuation.delimiter", EditorStyle::new().fg(grey));
    api.theme.register("ts.operator", EditorStyle::new().fg(purple));
}
