pub fn load(api) {
    let blue = (97, 175, 239);
    let purple = (198, 120, 221);
    let green = (152, 195, 121);
    let grey = (92, 99, 112);
    let yellow = (229, 192, 123);
    let orange = (209, 154, 102);
    let red = (224, 108, 117);

    api.commands.add(
        EditorCommand::RegisterTheme("ts.keyword", EditorStyle { fg: Some(purple), bg: None }),
    );
    api.commands.add(
        EditorCommand::RegisterTheme("ts.function", EditorStyle { fg: Some(blue), bg: None }),
    );
    api.commands.add(
        EditorCommand::RegisterTheme("ts.function.builtin", EditorStyle { fg: Some(blue), bg: None }),
    );
    api.commands.add(
        EditorCommand::RegisterTheme("ts.function.macro", EditorStyle { fg: Some(blue), bg: None }),
    );
    api.commands.add(EditorCommand::RegisterTheme("ts.string", EditorStyle { fg: Some(green), bg: None }));
    api.commands.add(EditorCommand::RegisterTheme("ts.comment", EditorStyle { fg: Some(grey), bg: None }));
    api.commands.add(EditorCommand::RegisterTheme("ts.type", EditorStyle { fg: Some(yellow), bg: None }));
    api.commands.add(
        EditorCommand::RegisterTheme("ts.type.builtin", EditorStyle { fg: Some(yellow), bg: None }),
    );
    api.commands.add(
        EditorCommand::RegisterTheme("ts.type.constant", EditorStyle { fg: Some(orange), bg: None }),
    );
    api.commands.add(
        EditorCommand::RegisterTheme("ts.constant.builtin", EditorStyle { fg: Some(orange), bg: None }),
    );
    api.commands.add(EditorCommand::RegisterTheme("ts.variable", EditorStyle { fg: Some(red), bg: None }));
    api.commands.add(
        EditorCommand::RegisterTheme("ts.variable.parameter", EditorStyle { fg: Some(red), bg: None }),
    );
    api.commands.add(EditorCommand::RegisterTheme("ts.property", EditorStyle { fg: Some(red), bg: None }));
    api.commands.add(
        EditorCommand::RegisterTheme("ts.punctuation.bracket", EditorStyle { fg: Some(grey), bg: None }),
    );
    api.commands.add(
        EditorCommand::RegisterTheme("ts.punctuation.delimiter", EditorStyle { fg: Some(grey), bg: None }),
    );
    api.commands.add(
        EditorCommand::RegisterTheme("ts.operator", EditorStyle { fg: Some(purple), bg: None }),
    );

    api.commands.add(EditorCommand::RefreshHighlights);
}
