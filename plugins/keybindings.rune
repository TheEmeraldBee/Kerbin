pub fn load(api) {
    // ----------- //
    // Keybindings //
    // ----------- //

    // Scrolling
    api.commands.add(
        EditorCommand::RegisterKeybinding(
            [],
            ["ctrl-u"],
            [EditorCommand::MoveCursor(0, -5), EditorCommand::Scroll(-5)],
            "Scroll Up",
        ),
    );
    api.commands.add(
        EditorCommand::RegisterKeybinding(
            [],
            ["ctrl-d"],
            [EditorCommand::MoveCursor(0, 5), EditorCommand::Scroll(5)],
            "Scroll Down",
        ),
    );

    // General Movement
    api.commands.add(
        EditorCommand::RegisterKeybinding([], ["left"], [EditorCommand::MoveCursor(-1, 0)], "Move Left"),
    );
    api.commands.add(
        EditorCommand::RegisterKeybinding([], ["down"], [EditorCommand::MoveCursor(0, 1)], "Move Down"),
    );
    api.commands.add(
        EditorCommand::RegisterKeybinding([], ["up"], [EditorCommand::MoveCursor(0, -1)], "Move Up"),
    );
    api.commands.add(
        EditorCommand::RegisterKeybinding([], ["left"], [EditorCommand::MoveCursor(1, 0)], "Move Right"),
    );

    api.commands.add(
        EditorCommand::RegisterKeybinding([], ["h"], [EditorCommand::MoveCursor(-1, 0)], "Move Left"),
    );
    api.commands.add(
        EditorCommand::RegisterKeybinding([], ["j"], [EditorCommand::MoveCursor(0, 1)], "Move Down"),
    );
    api.commands.add(
        EditorCommand::RegisterKeybinding([], ["k"], [EditorCommand::MoveCursor(0, -1)], "Move Up"),
    );
    api.commands.add(
        EditorCommand::RegisterKeybinding([], ["l"], [EditorCommand::MoveCursor(1, 0)], "Move Right"),
    );

    api.commands.add(
        EditorCommand::RegisterKeybinding(
            [],
            ["d"],
            [
                EditorCommand::StartChangeGroup,
                EditorCommand::DeleteChars(0, 1),
                EditorCommand::CommitChangeGroup,
            ],
            "Delete",
        ),
    );

    api.commands.add(
        EditorCommand::RegisterKeybinding(
            [],
            ["shift-d"],
            [
                EditorCommand::StartChangeGroup,
                EditorCommand::DeleteChars(0, std::u64::MAX),
                EditorCommand::CommitChangeGroup,
            ],
            "Delete",
        ),
    );

    // Insert Mode Bindings
    api.commands.add(
        EditorCommand::RegisterKeybinding(
            ['i'],
            ["backspace"],
            [EditorCommand::DeleteChars(-1, 1), EditorCommand::MoveCursor(-1, 0)],
            "Delete back",
        ),
    );
    api.commands.add(
        EditorCommand::RegisterKeybinding(
            ['i'],
            ["enter"],
            [EditorCommand::InsertLine(0), EditorCommand::MoveCursor(-32000, 1)],
            "New line",
        ),
    );

    // File Commands
    api.commands.add(
        EditorCommand::RegisterKeybinding([], [";", "w"], [EditorCommand::WriteFile(None)], "Write File"),
    );

    // Mode Switching
    api.commands.add(
        EditorCommand::RegisterKeybinding(
            ['n'],
            ["i"],
            [EditorCommand::StartChangeGroup, EditorCommand::ChangeMode('i')],
            "Insert Mode",
        ),
    );
    api.commands.add(
        EditorCommand::RegisterKeybinding(
            [],
            ["esc"],
            [EditorCommand::CommitChangeGroup, EditorCommand::ChangeMode('n')],
            "Exit to normal mode",
        ),
    );

    // Buffer management
    api.commands.add(
        EditorCommand::RegisterKeybinding(['n'], [";", "q"], [EditorCommand::CloseCurrentBuffer], "Close buffer"),
    );
    api.commands.add(
        EditorCommand::RegisterKeybinding(['n'], [";", "shift-q"], [EditorCommand::Quit], "Quit"),
    );
    api.commands.add(
        EditorCommand::RegisterKeybinding([], ["g", "n"], [EditorCommand::ChangeBuffer(1)], "Goto next buffer"),
    );
    api.commands.add(
        EditorCommand::RegisterKeybinding([], ["g", "p"], [EditorCommand::ChangeBuffer(-1)], "Goto prev buffer"),
    );

    // Quick actions
    api.commands.add(
        EditorCommand::RegisterKeybinding([], ["g", "h"], [EditorCommand::MoveCursor(-32000, 0)], "Goto end of line"),
    );
    api.commands.add(
        EditorCommand::RegisterKeybinding([], ["g", "l"], [EditorCommand::MoveCursor(32000, 0)], "Goto beginning of line"),
    );

    api.commands.add(
        EditorCommand::RegisterKeybinding(
            [],
            ["shift-x"],
            [
                EditorCommand::StartChangeGroup,
                EditorCommand::DeleteLine(0),
                EditorCommand::CommitChangeGroup,
            ],
            "Delete Current Line",
        ),
    );

    // History
    api.commands.add(EditorCommand::RegisterKeybinding([], ["u"], [EditorCommand::Undo], "Undo"));
    api.commands.add(EditorCommand::RegisterKeybinding([], ["shift-u"], [EditorCommand::Redo], "Redo"));

    api.commands.add(
        EditorCommand::RegisterKeybinding(
            ['n'],
            ["o"],
            [
                EditorCommand::StartChangeGroup,
                EditorCommand::CreateLine(1),
                EditorCommand::MoveCursor(0, 1),
                EditorCommand::ChangeMode('i'),
            ],
            "Edit on new line",
        ),
    );
    api.commands.add(
        EditorCommand::RegisterKeybinding(
            ['n'],
            ["shift-o"],
            [
                EditorCommand::StartChangeGroup,
                EditorCommand::CreateLine(0),
                EditorCommand::MoveCursor(0, 0),
                EditorCommand::ChangeMode('i'),
            ],
            "Edit on new line",
        ),
    );
}
